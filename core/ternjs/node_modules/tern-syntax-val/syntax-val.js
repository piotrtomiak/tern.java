(function(root, mod) {
  if (typeof exports == "object" && typeof module == "object") // CommonJS
    return mod(exports, require("tern/lib/infer"), require("tern/lib/tern"), require("acorn/dist/walk"), require("./acorn_val.js"));
  if (typeof define == "function" && define.amd) // AMD
    return define(["exports", "tern/lib/infer", "tern/lib/tern", "acorn/dist/walk", "./acorn_val.js"], mod);
  mod(root.tern || (root.tern = {}), tern, tern, acorn.walk);
})(this, function(exports, infer, tern, walk, syntax_val) {
  "use strict";  
  
  
  // Validator
  function validate(server, query, file, messages, strictParserError) {
	  function makeError(msg, start, end) {
 		  if (start > end) {
			  var tmp = start;
			  start = end
			  end = tmp;
		  }
		  if (start == end) {
			  end = start + 1;
		  }
		  if (end >= file.text.length) {
			  end = file.text.length;
			  if (start >= end) {
				  start = end - 1;
			  }
		  }
	      var error = {
	          message: msg,
	          from: tern.outputPos(query, file, start),
	          to: tern.outputPos(query, file, end),
	          severity: "error"
	      };
	      if (query.lineNumber) {
	        error.lineNumber = 1 + query.lineCharPositions ? error.from.line : tern.outputPos({lineCharPositions: true}, file, start).line; 
	      }
	      if (!query.groupByFiles) error.file = file.name;
	      return error;
	  }
	  
	  var options = {
	      directSourceFile: file,
	      allowReturnOutsideFunction: true,
	      allowImportExportEverywhere: true,
	      ecmaVersion: server.options.ecmaVersion
	  }
      var text = server.signalReturnFirst("preParse", file.text, options) || file.text;
      var err_msgs = syntax_val.validate_syntax(text, options);
      for (var id in err_msgs) {
    	  var msg = err_msgs[id];
    	  messages.push(makeError(msg.message, msg.start, msg.end));
      }
      if (messages.length == 0) {
    	  messages.push(makeError(strictParserError.message.replace(/\(\d*\:\d*\)$/, ""), 
    			  strictParserError.pos, strictParserError.raisedAt))
      }
  }
  
  // Validate one file
  var validateFile = exports.validateFile = function(server, query, file) {
    try {
      var messages = [], ast = file.ast, state = file.scope;
      if (ast.error) {
    	  validate(server, query, file, messages, ast.error);
      }
      return {messages: messages};
    } catch(err) {
      console.error(err.stack);
      return {messages: []};
    }
  }

  // Validate the whole files of the server
  var validateFiles = exports.validateFiles = function(server, query) {
	try {
		var messages = [], files = server.files, groupByFiles = query.groupByFiles == true;
		for (var i = 0; i < files.length; ++i) {
			var messagesFile = groupByFiles ? [] : messages, file = files[i], ast = file.ast, state = file.scope;
			var visitor = createVisitor(server, query, file, messagesFile);
			walk.simple(ast, visitor, infer.searchVisitor, state);
			if (groupByFiles)
				messages.push({
					file : file.name,
					messages : messagesFile
				});
		}
		return {messages : messages};
	} catch (err) {
		console.error(err.stack);
		return {messages : []};
	}
}
  
  tern.defineQueryType("syntax-val", {
    takesFile: true,
    noInfer: true,
    run: function(server, query, file) {
      return validateFile(server, query, file);  
    }
  });
  
  tern.defineQueryType("syntax-val-full", {
    run: function(server, query) {
      return validateFiles(server, query);
    }
  });
  
  tern.registerPlugin("syntax-val", function(server, options) {	
    server._syntax_val = {};
  });
  
});  